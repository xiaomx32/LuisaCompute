// This file is generated by update_intrinsic_name_map.py
// Do not edit it manually.

#include <luisa/core/logging.h>
#include <luisa/core/stl/unordered_map.h>

#include <luisa/xir/instructions/arithmetic.h>
#include <luisa/xir/instructions/atomic.h>
#include <luisa/xir/instructions/cast.h>
#include <luisa/xir/instructions/intrinsic.h>
#include <luisa/xir/instructions/thread_group.h>
#include <luisa/xir/instructions/ray_query.h>
#include <luisa/xir/instructions/resource.h>

namespace luisa::compute::xir {

luisa::string_view to_string(ArithmeticOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case ArithmeticOp::UNARY_PLUS: return "unary_plus"sv;
        case ArithmeticOp::UNARY_MINUS: return "unary_minus"sv;
        case ArithmeticOp::UNARY_BIT_NOT: return "unary_bit_not"sv;
        case ArithmeticOp::BINARY_ADD: return "binary_add"sv;
        case ArithmeticOp::BINARY_SUB: return "binary_sub"sv;
        case ArithmeticOp::BINARY_MUL: return "binary_mul"sv;
        case ArithmeticOp::BINARY_DIV: return "binary_div"sv;
        case ArithmeticOp::BINARY_MOD: return "binary_mod"sv;
        case ArithmeticOp::BINARY_BIT_AND: return "binary_bit_and"sv;
        case ArithmeticOp::BINARY_BIT_OR: return "binary_bit_or"sv;
        case ArithmeticOp::BINARY_BIT_XOR: return "binary_bit_xor"sv;
        case ArithmeticOp::BINARY_SHIFT_LEFT: return "binary_shift_left"sv;
        case ArithmeticOp::BINARY_SHIFT_RIGHT: return "binary_shift_right"sv;
        case ArithmeticOp::BINARY_ROTATE_LEFT: return "binary_rotate_left"sv;
        case ArithmeticOp::BINARY_ROTATE_RIGHT: return "binary_rotate_right"sv;
        case ArithmeticOp::BINARY_LESS: return "binary_less"sv;
        case ArithmeticOp::BINARY_GREATER: return "binary_greater"sv;
        case ArithmeticOp::BINARY_LESS_EQUAL: return "binary_less_equal"sv;
        case ArithmeticOp::BINARY_GREATER_EQUAL: return "binary_greater_equal"sv;
        case ArithmeticOp::BINARY_EQUAL: return "binary_equal"sv;
        case ArithmeticOp::BINARY_NOT_EQUAL: return "binary_not_equal"sv;
        case ArithmeticOp::ALL: return "all"sv;
        case ArithmeticOp::ANY: return "any"sv;
        case ArithmeticOp::SELECT: return "select"sv;
        case ArithmeticOp::CLAMP: return "clamp"sv;
        case ArithmeticOp::SATURATE: return "saturate"sv;
        case ArithmeticOp::LERP: return "lerp"sv;
        case ArithmeticOp::SMOOTHSTEP: return "smoothstep"sv;
        case ArithmeticOp::STEP: return "step"sv;
        case ArithmeticOp::ABS: return "abs"sv;
        case ArithmeticOp::MIN: return "min"sv;
        case ArithmeticOp::MAX: return "max"sv;
        case ArithmeticOp::CLZ: return "clz"sv;
        case ArithmeticOp::CTZ: return "ctz"sv;
        case ArithmeticOp::POPCOUNT: return "popcount"sv;
        case ArithmeticOp::REVERSE: return "reverse"sv;
        case ArithmeticOp::ISINF: return "isinf"sv;
        case ArithmeticOp::ISNAN: return "isnan"sv;
        case ArithmeticOp::ACOS: return "acos"sv;
        case ArithmeticOp::ACOSH: return "acosh"sv;
        case ArithmeticOp::ASIN: return "asin"sv;
        case ArithmeticOp::ASINH: return "asinh"sv;
        case ArithmeticOp::ATAN: return "atan"sv;
        case ArithmeticOp::ATAN2: return "atan2"sv;
        case ArithmeticOp::ATANH: return "atanh"sv;
        case ArithmeticOp::COS: return "cos"sv;
        case ArithmeticOp::COSH: return "cosh"sv;
        case ArithmeticOp::SIN: return "sin"sv;
        case ArithmeticOp::SINH: return "sinh"sv;
        case ArithmeticOp::TAN: return "tan"sv;
        case ArithmeticOp::TANH: return "tanh"sv;
        case ArithmeticOp::EXP: return "exp"sv;
        case ArithmeticOp::EXP2: return "exp2"sv;
        case ArithmeticOp::EXP10: return "exp10"sv;
        case ArithmeticOp::LOG: return "log"sv;
        case ArithmeticOp::LOG2: return "log2"sv;
        case ArithmeticOp::LOG10: return "log10"sv;
        case ArithmeticOp::POW: return "pow"sv;
        case ArithmeticOp::POW_INT: return "pow_int"sv;
        case ArithmeticOp::SQRT: return "sqrt"sv;
        case ArithmeticOp::RSQRT: return "rsqrt"sv;
        case ArithmeticOp::CEIL: return "ceil"sv;
        case ArithmeticOp::FLOOR: return "floor"sv;
        case ArithmeticOp::FRACT: return "fract"sv;
        case ArithmeticOp::TRUNC: return "trunc"sv;
        case ArithmeticOp::ROUND: return "round"sv;
        case ArithmeticOp::RINT: return "rint"sv;
        case ArithmeticOp::FMA: return "fma"sv;
        case ArithmeticOp::COPYSIGN: return "copysign"sv;
        case ArithmeticOp::CROSS: return "cross"sv;
        case ArithmeticOp::DOT: return "dot"sv;
        case ArithmeticOp::LENGTH: return "length"sv;
        case ArithmeticOp::LENGTH_SQUARED: return "length_squared"sv;
        case ArithmeticOp::NORMALIZE: return "normalize"sv;
        case ArithmeticOp::FACEFORWARD: return "faceforward"sv;
        case ArithmeticOp::REFLECT: return "reflect"sv;
        case ArithmeticOp::REDUCE_SUM: return "reduce_sum"sv;
        case ArithmeticOp::REDUCE_PRODUCT: return "reduce_product"sv;
        case ArithmeticOp::REDUCE_MIN: return "reduce_min"sv;
        case ArithmeticOp::REDUCE_MAX: return "reduce_max"sv;
        case ArithmeticOp::OUTER_PRODUCT: return "outer_product"sv;
        case ArithmeticOp::MATRIX_COMP_NEG: return "matrix_comp_neg"sv;
        case ArithmeticOp::MATRIX_COMP_ADD: return "matrix_comp_add"sv;
        case ArithmeticOp::MATRIX_COMP_SUB: return "matrix_comp_sub"sv;
        case ArithmeticOp::MATRIX_COMP_MUL: return "matrix_comp_mul"sv;
        case ArithmeticOp::MATRIX_COMP_DIV: return "matrix_comp_div"sv;
        case ArithmeticOp::MATRIX_LINALG_MUL: return "matrix_linalg_mul"sv;
        case ArithmeticOp::MATRIX_DETERMINANT: return "matrix_determinant"sv;
        case ArithmeticOp::MATRIX_TRANSPOSE: return "matrix_transpose"sv;
        case ArithmeticOp::MATRIX_INVERSE: return "matrix_inverse"sv;
        case ArithmeticOp::AGGREGATE: return "aggregate"sv;
        case ArithmeticOp::SHUFFLE: return "shuffle"sv;
        case ArithmeticOp::INSERT: return "insert"sv;
        case ArithmeticOp::EXTRACT: return "extract"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown arithmetic operation (code = {}).", static_cast<uint32_t>(op));
}

ArithmeticOp arithmetic_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, ArithmeticOp> m{
        {"unary_plus"sv, ArithmeticOp::UNARY_PLUS},
        {"unary_minus"sv, ArithmeticOp::UNARY_MINUS},
        {"unary_bit_not"sv, ArithmeticOp::UNARY_BIT_NOT},
        {"binary_add"sv, ArithmeticOp::BINARY_ADD},
        {"binary_sub"sv, ArithmeticOp::BINARY_SUB},
        {"binary_mul"sv, ArithmeticOp::BINARY_MUL},
        {"binary_div"sv, ArithmeticOp::BINARY_DIV},
        {"binary_mod"sv, ArithmeticOp::BINARY_MOD},
        {"binary_bit_and"sv, ArithmeticOp::BINARY_BIT_AND},
        {"binary_bit_or"sv, ArithmeticOp::BINARY_BIT_OR},
        {"binary_bit_xor"sv, ArithmeticOp::BINARY_BIT_XOR},
        {"binary_shift_left"sv, ArithmeticOp::BINARY_SHIFT_LEFT},
        {"binary_shift_right"sv, ArithmeticOp::BINARY_SHIFT_RIGHT},
        {"binary_rotate_left"sv, ArithmeticOp::BINARY_ROTATE_LEFT},
        {"binary_rotate_right"sv, ArithmeticOp::BINARY_ROTATE_RIGHT},
        {"binary_less"sv, ArithmeticOp::BINARY_LESS},
        {"binary_greater"sv, ArithmeticOp::BINARY_GREATER},
        {"binary_less_equal"sv, ArithmeticOp::BINARY_LESS_EQUAL},
        {"binary_greater_equal"sv, ArithmeticOp::BINARY_GREATER_EQUAL},
        {"binary_equal"sv, ArithmeticOp::BINARY_EQUAL},
        {"binary_not_equal"sv, ArithmeticOp::BINARY_NOT_EQUAL},
        {"all"sv, ArithmeticOp::ALL},
        {"any"sv, ArithmeticOp::ANY},
        {"select"sv, ArithmeticOp::SELECT},
        {"clamp"sv, ArithmeticOp::CLAMP},
        {"saturate"sv, ArithmeticOp::SATURATE},
        {"lerp"sv, ArithmeticOp::LERP},
        {"smoothstep"sv, ArithmeticOp::SMOOTHSTEP},
        {"step"sv, ArithmeticOp::STEP},
        {"abs"sv, ArithmeticOp::ABS},
        {"min"sv, ArithmeticOp::MIN},
        {"max"sv, ArithmeticOp::MAX},
        {"clz"sv, ArithmeticOp::CLZ},
        {"ctz"sv, ArithmeticOp::CTZ},
        {"popcount"sv, ArithmeticOp::POPCOUNT},
        {"reverse"sv, ArithmeticOp::REVERSE},
        {"isinf"sv, ArithmeticOp::ISINF},
        {"isnan"sv, ArithmeticOp::ISNAN},
        {"acos"sv, ArithmeticOp::ACOS},
        {"acosh"sv, ArithmeticOp::ACOSH},
        {"asin"sv, ArithmeticOp::ASIN},
        {"asinh"sv, ArithmeticOp::ASINH},
        {"atan"sv, ArithmeticOp::ATAN},
        {"atan2"sv, ArithmeticOp::ATAN2},
        {"atanh"sv, ArithmeticOp::ATANH},
        {"cos"sv, ArithmeticOp::COS},
        {"cosh"sv, ArithmeticOp::COSH},
        {"sin"sv, ArithmeticOp::SIN},
        {"sinh"sv, ArithmeticOp::SINH},
        {"tan"sv, ArithmeticOp::TAN},
        {"tanh"sv, ArithmeticOp::TANH},
        {"exp"sv, ArithmeticOp::EXP},
        {"exp2"sv, ArithmeticOp::EXP2},
        {"exp10"sv, ArithmeticOp::EXP10},
        {"log"sv, ArithmeticOp::LOG},
        {"log2"sv, ArithmeticOp::LOG2},
        {"log10"sv, ArithmeticOp::LOG10},
        {"pow"sv, ArithmeticOp::POW},
        {"pow_int"sv, ArithmeticOp::POW_INT},
        {"sqrt"sv, ArithmeticOp::SQRT},
        {"rsqrt"sv, ArithmeticOp::RSQRT},
        {"ceil"sv, ArithmeticOp::CEIL},
        {"floor"sv, ArithmeticOp::FLOOR},
        {"fract"sv, ArithmeticOp::FRACT},
        {"trunc"sv, ArithmeticOp::TRUNC},
        {"round"sv, ArithmeticOp::ROUND},
        {"rint"sv, ArithmeticOp::RINT},
        {"fma"sv, ArithmeticOp::FMA},
        {"copysign"sv, ArithmeticOp::COPYSIGN},
        {"cross"sv, ArithmeticOp::CROSS},
        {"dot"sv, ArithmeticOp::DOT},
        {"length"sv, ArithmeticOp::LENGTH},
        {"length_squared"sv, ArithmeticOp::LENGTH_SQUARED},
        {"normalize"sv, ArithmeticOp::NORMALIZE},
        {"faceforward"sv, ArithmeticOp::FACEFORWARD},
        {"reflect"sv, ArithmeticOp::REFLECT},
        {"reduce_sum"sv, ArithmeticOp::REDUCE_SUM},
        {"reduce_product"sv, ArithmeticOp::REDUCE_PRODUCT},
        {"reduce_min"sv, ArithmeticOp::REDUCE_MIN},
        {"reduce_max"sv, ArithmeticOp::REDUCE_MAX},
        {"outer_product"sv, ArithmeticOp::OUTER_PRODUCT},
        {"matrix_comp_neg"sv, ArithmeticOp::MATRIX_COMP_NEG},
        {"matrix_comp_add"sv, ArithmeticOp::MATRIX_COMP_ADD},
        {"matrix_comp_sub"sv, ArithmeticOp::MATRIX_COMP_SUB},
        {"matrix_comp_mul"sv, ArithmeticOp::MATRIX_COMP_MUL},
        {"matrix_comp_div"sv, ArithmeticOp::MATRIX_COMP_DIV},
        {"matrix_linalg_mul"sv, ArithmeticOp::MATRIX_LINALG_MUL},
        {"matrix_determinant"sv, ArithmeticOp::MATRIX_DETERMINANT},
        {"matrix_transpose"sv, ArithmeticOp::MATRIX_TRANSPOSE},
        {"matrix_inverse"sv, ArithmeticOp::MATRIX_INVERSE},
        {"aggregate"sv, ArithmeticOp::AGGREGATE},
        {"shuffle"sv, ArithmeticOp::SHUFFLE},
        {"insert"sv, ArithmeticOp::INSERT},
        {"extract"sv, ArithmeticOp::EXTRACT},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown arithmetic operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(AtomicOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case AtomicOp::EXCHANGE: return "exchange"sv;
        case AtomicOp::COMPARE_EXCHANGE: return "compare_exchange"sv;
        case AtomicOp::FETCH_ADD: return "fetch_add"sv;
        case AtomicOp::FETCH_SUB: return "fetch_sub"sv;
        case AtomicOp::FETCH_AND: return "fetch_and"sv;
        case AtomicOp::FETCH_OR: return "fetch_or"sv;
        case AtomicOp::FETCH_XOR: return "fetch_xor"sv;
        case AtomicOp::FETCH_MIN: return "fetch_min"sv;
        case AtomicOp::FETCH_MAX: return "fetch_max"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown atomic operation (code = {}).", static_cast<uint32_t>(op));
}

AtomicOp atomic_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, AtomicOp> m{
        {"exchange"sv, AtomicOp::EXCHANGE},
        {"compare_exchange"sv, AtomicOp::COMPARE_EXCHANGE},
        {"fetch_add"sv, AtomicOp::FETCH_ADD},
        {"fetch_sub"sv, AtomicOp::FETCH_SUB},
        {"fetch_and"sv, AtomicOp::FETCH_AND},
        {"fetch_or"sv, AtomicOp::FETCH_OR},
        {"fetch_xor"sv, AtomicOp::FETCH_XOR},
        {"fetch_min"sv, AtomicOp::FETCH_MIN},
        {"fetch_max"sv, AtomicOp::FETCH_MAX},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown atomic operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(CastOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case CastOp::STATIC_CAST: return "static_cast"sv;
        case CastOp::BITWISE_CAST: return "bitwise_cast"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown cast operation (code = {}).", static_cast<uint32_t>(op));
}

CastOp cast_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, CastOp> m{
        {"static_cast"sv, CastOp::STATIC_CAST},
        {"bitwise_cast"sv, CastOp::BITWISE_CAST},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown cast operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(IntrinsicOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case IntrinsicOp::NOP: return "nop"sv;
        case IntrinsicOp::AUTODIFF_REQUIRES_GRADIENT: return "autodiff_requires_gradient"sv;
        case IntrinsicOp::AUTODIFF_GRADIENT: return "autodiff_gradient"sv;
        case IntrinsicOp::AUTODIFF_GRADIENT_MARKER: return "autodiff_gradient_marker"sv;
        case IntrinsicOp::AUTODIFF_ACCUMULATE_GRADIENT: return "autodiff_accumulate_gradient"sv;
        case IntrinsicOp::AUTODIFF_BACKWARD: return "autodiff_backward"sv;
        case IntrinsicOp::AUTODIFF_DETACH: return "autodiff_detach"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown intrinsic operation (code = {}).", static_cast<uint32_t>(op));
}

IntrinsicOp intrinsic_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, IntrinsicOp> m{
        {"nop"sv, IntrinsicOp::NOP},
        {"autodiff_requires_gradient"sv, IntrinsicOp::AUTODIFF_REQUIRES_GRADIENT},
        {"autodiff_gradient"sv, IntrinsicOp::AUTODIFF_GRADIENT},
        {"autodiff_gradient_marker"sv, IntrinsicOp::AUTODIFF_GRADIENT_MARKER},
        {"autodiff_accumulate_gradient"sv, IntrinsicOp::AUTODIFF_ACCUMULATE_GRADIENT},
        {"autodiff_backward"sv, IntrinsicOp::AUTODIFF_BACKWARD},
        {"autodiff_detach"sv, IntrinsicOp::AUTODIFF_DETACH},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown intrinsic operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(ThreadGroupOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case ThreadGroupOp::SHADER_EXECUTION_REORDER: return "shader_execution_reorder"sv;
        case ThreadGroupOp::RASTER_QUAD_DDX: return "raster_quad_ddx"sv;
        case ThreadGroupOp::RASTER_QUAD_DDY: return "raster_quad_ddy"sv;
        case ThreadGroupOp::WARP_IS_FIRST_ACTIVE_LANE: return "warp_is_first_active_lane"sv;
        case ThreadGroupOp::WARP_FIRST_ACTIVE_LANE: return "warp_first_active_lane"sv;
        case ThreadGroupOp::WARP_ACTIVE_ALL_EQUAL: return "warp_active_all_equal"sv;
        case ThreadGroupOp::WARP_ACTIVE_BIT_AND: return "warp_active_bit_and"sv;
        case ThreadGroupOp::WARP_ACTIVE_BIT_OR: return "warp_active_bit_or"sv;
        case ThreadGroupOp::WARP_ACTIVE_BIT_XOR: return "warp_active_bit_xor"sv;
        case ThreadGroupOp::WARP_ACTIVE_COUNT_BITS: return "warp_active_count_bits"sv;
        case ThreadGroupOp::WARP_ACTIVE_MAX: return "warp_active_max"sv;
        case ThreadGroupOp::WARP_ACTIVE_MIN: return "warp_active_min"sv;
        case ThreadGroupOp::WARP_ACTIVE_PRODUCT: return "warp_active_product"sv;
        case ThreadGroupOp::WARP_ACTIVE_SUM: return "warp_active_sum"sv;
        case ThreadGroupOp::WARP_ACTIVE_ALL: return "warp_active_all"sv;
        case ThreadGroupOp::WARP_ACTIVE_ANY: return "warp_active_any"sv;
        case ThreadGroupOp::WARP_ACTIVE_BIT_MASK: return "warp_active_bit_mask"sv;
        case ThreadGroupOp::WARP_PREFIX_COUNT_BITS: return "warp_prefix_count_bits"sv;
        case ThreadGroupOp::WARP_PREFIX_SUM: return "warp_prefix_sum"sv;
        case ThreadGroupOp::WARP_PREFIX_PRODUCT: return "warp_prefix_product"sv;
        case ThreadGroupOp::WARP_READ_LANE: return "warp_read_lane"sv;
        case ThreadGroupOp::WARP_READ_FIRST_ACTIVE_LANE: return "warp_read_first_active_lane"sv;
        case ThreadGroupOp::SYNCHRONIZE_BLOCK: return "synchronize_block"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown thread_group operation (code = {}).", static_cast<uint32_t>(op));
}

ThreadGroupOp thread_group_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, ThreadGroupOp> m{
        {"shader_execution_reorder"sv, ThreadGroupOp::SHADER_EXECUTION_REORDER},
        {"raster_quad_ddx"sv, ThreadGroupOp::RASTER_QUAD_DDX},
        {"raster_quad_ddy"sv, ThreadGroupOp::RASTER_QUAD_DDY},
        {"warp_is_first_active_lane"sv, ThreadGroupOp::WARP_IS_FIRST_ACTIVE_LANE},
        {"warp_first_active_lane"sv, ThreadGroupOp::WARP_FIRST_ACTIVE_LANE},
        {"warp_active_all_equal"sv, ThreadGroupOp::WARP_ACTIVE_ALL_EQUAL},
        {"warp_active_bit_and"sv, ThreadGroupOp::WARP_ACTIVE_BIT_AND},
        {"warp_active_bit_or"sv, ThreadGroupOp::WARP_ACTIVE_BIT_OR},
        {"warp_active_bit_xor"sv, ThreadGroupOp::WARP_ACTIVE_BIT_XOR},
        {"warp_active_count_bits"sv, ThreadGroupOp::WARP_ACTIVE_COUNT_BITS},
        {"warp_active_max"sv, ThreadGroupOp::WARP_ACTIVE_MAX},
        {"warp_active_min"sv, ThreadGroupOp::WARP_ACTIVE_MIN},
        {"warp_active_product"sv, ThreadGroupOp::WARP_ACTIVE_PRODUCT},
        {"warp_active_sum"sv, ThreadGroupOp::WARP_ACTIVE_SUM},
        {"warp_active_all"sv, ThreadGroupOp::WARP_ACTIVE_ALL},
        {"warp_active_any"sv, ThreadGroupOp::WARP_ACTIVE_ANY},
        {"warp_active_bit_mask"sv, ThreadGroupOp::WARP_ACTIVE_BIT_MASK},
        {"warp_prefix_count_bits"sv, ThreadGroupOp::WARP_PREFIX_COUNT_BITS},
        {"warp_prefix_sum"sv, ThreadGroupOp::WARP_PREFIX_SUM},
        {"warp_prefix_product"sv, ThreadGroupOp::WARP_PREFIX_PRODUCT},
        {"warp_read_lane"sv, ThreadGroupOp::WARP_READ_LANE},
        {"warp_read_first_active_lane"sv, ThreadGroupOp::WARP_READ_FIRST_ACTIVE_LANE},
        {"synchronize_block"sv, ThreadGroupOp::SYNCHRONIZE_BLOCK},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown thread_group operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(RayQueryObjectReadOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_WORLD_SPACE_RAY: return "ray_query_object_world_space_ray"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_PROCEDURAL_CANDIDATE_HIT: return "ray_query_object_procedural_candidate_hit"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_TRIANGLE_CANDIDATE_HIT: return "ray_query_object_triangle_candidate_hit"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_COMMITTED_HIT: return "ray_query_object_committed_hit"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_TRIANGLE_CANDIDATE: return "ray_query_object_is_triangle_candidate"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_PROCEDURAL_CANDIDATE: return "ray_query_object_is_procedural_candidate"sv;
        case RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_TERMINATED: return "ray_query_object_is_terminated"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown ray_query operation (code = {}).", static_cast<uint32_t>(op));
}

RayQueryObjectReadOp ray_query_object_read_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, RayQueryObjectReadOp> m{
        {"ray_query_object_world_space_ray"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_WORLD_SPACE_RAY},
        {"ray_query_object_procedural_candidate_hit"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_PROCEDURAL_CANDIDATE_HIT},
        {"ray_query_object_triangle_candidate_hit"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_TRIANGLE_CANDIDATE_HIT},
        {"ray_query_object_committed_hit"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_COMMITTED_HIT},
        {"ray_query_object_is_triangle_candidate"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_TRIANGLE_CANDIDATE},
        {"ray_query_object_is_procedural_candidate"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_PROCEDURAL_CANDIDATE},
        {"ray_query_object_is_terminated"sv, RayQueryObjectReadOp::RAY_QUERY_OBJECT_IS_TERMINATED},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown ray_query_object_read operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(RayQueryObjectWriteOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case RayQueryObjectWriteOp::RAY_QUERY_OBJECT_COMMIT_TRIANGLE: return "ray_query_object_commit_triangle"sv;
        case RayQueryObjectWriteOp::RAY_QUERY_OBJECT_COMMIT_PROCEDURAL: return "ray_query_object_commit_procedural"sv;
        case RayQueryObjectWriteOp::RAY_QUERY_OBJECT_TERMINATE: return "ray_query_object_terminate"sv;
        case RayQueryObjectWriteOp::RAY_QUERY_OBJECT_PROCEED: return "ray_query_object_proceed"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown ray_query operation (code = {}).", static_cast<uint32_t>(op));
}

RayQueryObjectWriteOp ray_query_object_write_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, RayQueryObjectWriteOp> m{
        {"ray_query_object_commit_triangle"sv, RayQueryObjectWriteOp::RAY_QUERY_OBJECT_COMMIT_TRIANGLE},
        {"ray_query_object_commit_procedural"sv, RayQueryObjectWriteOp::RAY_QUERY_OBJECT_COMMIT_PROCEDURAL},
        {"ray_query_object_terminate"sv, RayQueryObjectWriteOp::RAY_QUERY_OBJECT_TERMINATE},
        {"ray_query_object_proceed"sv, RayQueryObjectWriteOp::RAY_QUERY_OBJECT_PROCEED},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown ray_query_object_write operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(ResourceQueryOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case ResourceQueryOp::BUFFER_SIZE: return "buffer_size"sv;
        case ResourceQueryOp::BYTE_BUFFER_SIZE: return "byte_buffer_size"sv;
        case ResourceQueryOp::TEXTURE2D_SIZE: return "texture2d_size"sv;
        case ResourceQueryOp::TEXTURE3D_SIZE: return "texture3d_size"sv;
        case ResourceQueryOp::BINDLESS_BUFFER_SIZE: return "bindless_buffer_size"sv;
        case ResourceQueryOp::BINDLESS_BYTE_BUFFER_SIZE: return "bindless_byte_buffer_size"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SIZE: return "bindless_texture2d_size"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SIZE: return "bindless_texture3d_size"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SIZE_LEVEL: return "bindless_texture2d_size_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SIZE_LEVEL: return "bindless_texture3d_size_level"sv;
        case ResourceQueryOp::TEXTURE2D_SAMPLE: return "texture2d_sample"sv;
        case ResourceQueryOp::TEXTURE2D_SAMPLE_LEVEL: return "texture2d_sample_level"sv;
        case ResourceQueryOp::TEXTURE2D_SAMPLE_GRAD: return "texture2d_sample_grad"sv;
        case ResourceQueryOp::TEXTURE2D_SAMPLE_GRAD_LEVEL: return "texture2d_sample_grad_level"sv;
        case ResourceQueryOp::TEXTURE3D_SAMPLE: return "texture3d_sample"sv;
        case ResourceQueryOp::TEXTURE3D_SAMPLE_LEVEL: return "texture3d_sample_level"sv;
        case ResourceQueryOp::TEXTURE3D_SAMPLE_GRAD: return "texture3d_sample_grad"sv;
        case ResourceQueryOp::TEXTURE3D_SAMPLE_GRAD_LEVEL: return "texture3d_sample_grad_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE: return "bindless_texture2d_sample"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_LEVEL: return "bindless_texture2d_sample_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD: return "bindless_texture2d_sample_grad"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL: return "bindless_texture2d_sample_grad_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE: return "bindless_texture3d_sample"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_LEVEL: return "bindless_texture3d_sample_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD: return "bindless_texture3d_sample_grad"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL: return "bindless_texture3d_sample_grad_level"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_SAMPLER: return "bindless_texture2d_sample_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_LEVEL_SAMPLER: return "bindless_texture2d_sample_level_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_SAMPLER: return "bindless_texture2d_sample_grad_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL_SAMPLER: return "bindless_texture2d_sample_grad_level_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_SAMPLER: return "bindless_texture3d_sample_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_LEVEL_SAMPLER: return "bindless_texture3d_sample_level_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_SAMPLER: return "bindless_texture3d_sample_grad_sampler"sv;
        case ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL_SAMPLER: return "bindless_texture3d_sample_grad_level_sampler"sv;
        case ResourceQueryOp::BUFFER_DEVICE_ADDRESS: return "buffer_device_address"sv;
        case ResourceQueryOp::BINDLESS_BUFFER_DEVICE_ADDRESS: return "bindless_buffer_device_address"sv;
        case ResourceQueryOp::RAY_TRACING_INSTANCE_TRANSFORM: return "ray_tracing_instance_transform"sv;
        case ResourceQueryOp::RAY_TRACING_INSTANCE_USER_ID: return "ray_tracing_instance_user_id"sv;
        case ResourceQueryOp::RAY_TRACING_INSTANCE_VISIBILITY_MASK: return "ray_tracing_instance_visibility_mask"sv;
        case ResourceQueryOp::RAY_TRACING_TRACE_CLOSEST: return "ray_tracing_trace_closest"sv;
        case ResourceQueryOp::RAY_TRACING_TRACE_ANY: return "ray_tracing_trace_any"sv;
        case ResourceQueryOp::RAY_TRACING_QUERY_ALL: return "ray_tracing_query_all"sv;
        case ResourceQueryOp::RAY_TRACING_QUERY_ANY: return "ray_tracing_query_any"sv;
        case ResourceQueryOp::RAY_TRACING_INSTANCE_MOTION_MATRIX: return "ray_tracing_instance_motion_matrix"sv;
        case ResourceQueryOp::RAY_TRACING_INSTANCE_MOTION_SRT: return "ray_tracing_instance_motion_srt"sv;
        case ResourceQueryOp::RAY_TRACING_TRACE_CLOSEST_MOTION_BLUR: return "ray_tracing_trace_closest_motion_blur"sv;
        case ResourceQueryOp::RAY_TRACING_TRACE_ANY_MOTION_BLUR: return "ray_tracing_trace_any_motion_blur"sv;
        case ResourceQueryOp::RAY_TRACING_QUERY_ALL_MOTION_BLUR: return "ray_tracing_query_all_motion_blur"sv;
        case ResourceQueryOp::RAY_TRACING_QUERY_ANY_MOTION_BLUR: return "ray_tracing_query_any_motion_blur"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown resource operation (code = {}).", static_cast<uint32_t>(op));
}

ResourceQueryOp resource_query_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, ResourceQueryOp> m{
        {"buffer_size"sv, ResourceQueryOp::BUFFER_SIZE},
        {"byte_buffer_size"sv, ResourceQueryOp::BYTE_BUFFER_SIZE},
        {"texture2d_size"sv, ResourceQueryOp::TEXTURE2D_SIZE},
        {"texture3d_size"sv, ResourceQueryOp::TEXTURE3D_SIZE},
        {"bindless_buffer_size"sv, ResourceQueryOp::BINDLESS_BUFFER_SIZE},
        {"bindless_byte_buffer_size"sv, ResourceQueryOp::BINDLESS_BYTE_BUFFER_SIZE},
        {"bindless_texture2d_size"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SIZE},
        {"bindless_texture3d_size"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SIZE},
        {"bindless_texture2d_size_level"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SIZE_LEVEL},
        {"bindless_texture3d_size_level"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SIZE_LEVEL},
        {"texture2d_sample"sv, ResourceQueryOp::TEXTURE2D_SAMPLE},
        {"texture2d_sample_level"sv, ResourceQueryOp::TEXTURE2D_SAMPLE_LEVEL},
        {"texture2d_sample_grad"sv, ResourceQueryOp::TEXTURE2D_SAMPLE_GRAD},
        {"texture2d_sample_grad_level"sv, ResourceQueryOp::TEXTURE2D_SAMPLE_GRAD_LEVEL},
        {"texture3d_sample"sv, ResourceQueryOp::TEXTURE3D_SAMPLE},
        {"texture3d_sample_level"sv, ResourceQueryOp::TEXTURE3D_SAMPLE_LEVEL},
        {"texture3d_sample_grad"sv, ResourceQueryOp::TEXTURE3D_SAMPLE_GRAD},
        {"texture3d_sample_grad_level"sv, ResourceQueryOp::TEXTURE3D_SAMPLE_GRAD_LEVEL},
        {"bindless_texture2d_sample"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE},
        {"bindless_texture2d_sample_level"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_LEVEL},
        {"bindless_texture2d_sample_grad"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD},
        {"bindless_texture2d_sample_grad_level"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL},
        {"bindless_texture3d_sample"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE},
        {"bindless_texture3d_sample_level"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_LEVEL},
        {"bindless_texture3d_sample_grad"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD},
        {"bindless_texture3d_sample_grad_level"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL},
        {"bindless_texture2d_sample_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_SAMPLER},
        {"bindless_texture2d_sample_level_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_LEVEL_SAMPLER},
        {"bindless_texture2d_sample_grad_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_SAMPLER},
        {"bindless_texture2d_sample_grad_level_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL_SAMPLER},
        {"bindless_texture3d_sample_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_SAMPLER},
        {"bindless_texture3d_sample_level_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_LEVEL_SAMPLER},
        {"bindless_texture3d_sample_grad_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_SAMPLER},
        {"bindless_texture3d_sample_grad_level_sampler"sv, ResourceQueryOp::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL_SAMPLER},
        {"buffer_device_address"sv, ResourceQueryOp::BUFFER_DEVICE_ADDRESS},
        {"bindless_buffer_device_address"sv, ResourceQueryOp::BINDLESS_BUFFER_DEVICE_ADDRESS},
        {"ray_tracing_instance_transform"sv, ResourceQueryOp::RAY_TRACING_INSTANCE_TRANSFORM},
        {"ray_tracing_instance_user_id"sv, ResourceQueryOp::RAY_TRACING_INSTANCE_USER_ID},
        {"ray_tracing_instance_visibility_mask"sv, ResourceQueryOp::RAY_TRACING_INSTANCE_VISIBILITY_MASK},
        {"ray_tracing_trace_closest"sv, ResourceQueryOp::RAY_TRACING_TRACE_CLOSEST},
        {"ray_tracing_trace_any"sv, ResourceQueryOp::RAY_TRACING_TRACE_ANY},
        {"ray_tracing_query_all"sv, ResourceQueryOp::RAY_TRACING_QUERY_ALL},
        {"ray_tracing_query_any"sv, ResourceQueryOp::RAY_TRACING_QUERY_ANY},
        {"ray_tracing_instance_motion_matrix"sv, ResourceQueryOp::RAY_TRACING_INSTANCE_MOTION_MATRIX},
        {"ray_tracing_instance_motion_srt"sv, ResourceQueryOp::RAY_TRACING_INSTANCE_MOTION_SRT},
        {"ray_tracing_trace_closest_motion_blur"sv, ResourceQueryOp::RAY_TRACING_TRACE_CLOSEST_MOTION_BLUR},
        {"ray_tracing_trace_any_motion_blur"sv, ResourceQueryOp::RAY_TRACING_TRACE_ANY_MOTION_BLUR},
        {"ray_tracing_query_all_motion_blur"sv, ResourceQueryOp::RAY_TRACING_QUERY_ALL_MOTION_BLUR},
        {"ray_tracing_query_any_motion_blur"sv, ResourceQueryOp::RAY_TRACING_QUERY_ANY_MOTION_BLUR},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown resource_query operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(ResourceReadOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case ResourceReadOp::BUFFER_READ: return "buffer_read"sv;
        case ResourceReadOp::BYTE_BUFFER_READ: return "byte_buffer_read"sv;
        case ResourceReadOp::TEXTURE2D_READ: return "texture2d_read"sv;
        case ResourceReadOp::TEXTURE3D_READ: return "texture3d_read"sv;
        case ResourceReadOp::BINDLESS_BUFFER_READ: return "bindless_buffer_read"sv;
        case ResourceReadOp::BINDLESS_BYTE_BUFFER_READ: return "bindless_byte_buffer_read"sv;
        case ResourceReadOp::BINDLESS_TEXTURE2D_READ: return "bindless_texture2d_read"sv;
        case ResourceReadOp::BINDLESS_TEXTURE3D_READ: return "bindless_texture3d_read"sv;
        case ResourceReadOp::BINDLESS_TEXTURE2D_READ_LEVEL: return "bindless_texture2d_read_level"sv;
        case ResourceReadOp::BINDLESS_TEXTURE3D_READ_LEVEL: return "bindless_texture3d_read_level"sv;
        case ResourceReadOp::DEVICE_ADDRESS_READ: return "device_address_read"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown resource operation (code = {}).", static_cast<uint32_t>(op));
}

ResourceReadOp resource_read_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, ResourceReadOp> m{
        {"buffer_read"sv, ResourceReadOp::BUFFER_READ},
        {"byte_buffer_read"sv, ResourceReadOp::BYTE_BUFFER_READ},
        {"texture2d_read"sv, ResourceReadOp::TEXTURE2D_READ},
        {"texture3d_read"sv, ResourceReadOp::TEXTURE3D_READ},
        {"bindless_buffer_read"sv, ResourceReadOp::BINDLESS_BUFFER_READ},
        {"bindless_byte_buffer_read"sv, ResourceReadOp::BINDLESS_BYTE_BUFFER_READ},
        {"bindless_texture2d_read"sv, ResourceReadOp::BINDLESS_TEXTURE2D_READ},
        {"bindless_texture3d_read"sv, ResourceReadOp::BINDLESS_TEXTURE3D_READ},
        {"bindless_texture2d_read_level"sv, ResourceReadOp::BINDLESS_TEXTURE2D_READ_LEVEL},
        {"bindless_texture3d_read_level"sv, ResourceReadOp::BINDLESS_TEXTURE3D_READ_LEVEL},
        {"device_address_read"sv, ResourceReadOp::DEVICE_ADDRESS_READ},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown resource_read operation: {}.", name);
    return iter->second;
}

luisa::string_view to_string(ResourceWriteOp op) noexcept {
    using namespace std::string_view_literals;
    switch (op) {
        case ResourceWriteOp::BUFFER_WRITE: return "buffer_write"sv;
        case ResourceWriteOp::BYTE_BUFFER_WRITE: return "byte_buffer_write"sv;
        case ResourceWriteOp::TEXTURE2D_WRITE: return "texture2d_write"sv;
        case ResourceWriteOp::TEXTURE3D_WRITE: return "texture3d_write"sv;
        case ResourceWriteOp::BINDLESS_BUFFER_WRITE: return "bindless_buffer_write"sv;
        case ResourceWriteOp::BINDLESS_BYTE_BUFFER_WRITE: return "bindless_byte_buffer_write"sv;
        case ResourceWriteOp::DEVICE_ADDRESS_WRITE: return "device_address_write"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_TRANSFORM: return "ray_tracing_set_instance_transform"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_VISIBILITY_MASK: return "ray_tracing_set_instance_visibility_mask"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_OPACITY: return "ray_tracing_set_instance_opacity"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_USER_ID: return "ray_tracing_set_instance_user_id"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_MOTION_MATRIX: return "ray_tracing_set_instance_motion_matrix"sv;
        case ResourceWriteOp::RAY_TRACING_SET_INSTANCE_MOTION_SRT: return "ray_tracing_set_instance_motion_srt"sv;
        case ResourceWriteOp::INDIRECT_DISPATCH_SET_KERNEL: return "indirect_dispatch_set_kernel"sv;
        case ResourceWriteOp::INDIRECT_DISPATCH_SET_COUNT: return "indirect_dispatch_set_count"sv;
    }
    LUISA_ERROR_WITH_LOCATION("Unknown resource operation (code = {}).", static_cast<uint32_t>(op));
}

ResourceWriteOp resource_write_op_from_string(luisa::string_view name) noexcept {
    using namespace std::string_view_literals;
    static const luisa::unordered_map<luisa::string_view, ResourceWriteOp> m{
        {"buffer_write"sv, ResourceWriteOp::BUFFER_WRITE},
        {"byte_buffer_write"sv, ResourceWriteOp::BYTE_BUFFER_WRITE},
        {"texture2d_write"sv, ResourceWriteOp::TEXTURE2D_WRITE},
        {"texture3d_write"sv, ResourceWriteOp::TEXTURE3D_WRITE},
        {"bindless_buffer_write"sv, ResourceWriteOp::BINDLESS_BUFFER_WRITE},
        {"bindless_byte_buffer_write"sv, ResourceWriteOp::BINDLESS_BYTE_BUFFER_WRITE},
        {"device_address_write"sv, ResourceWriteOp::DEVICE_ADDRESS_WRITE},
        {"ray_tracing_set_instance_transform"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_TRANSFORM},
        {"ray_tracing_set_instance_visibility_mask"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_VISIBILITY_MASK},
        {"ray_tracing_set_instance_opacity"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_OPACITY},
        {"ray_tracing_set_instance_user_id"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_USER_ID},
        {"ray_tracing_set_instance_motion_matrix"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_MOTION_MATRIX},
        {"ray_tracing_set_instance_motion_srt"sv, ResourceWriteOp::RAY_TRACING_SET_INSTANCE_MOTION_SRT},
        {"indirect_dispatch_set_kernel"sv, ResourceWriteOp::INDIRECT_DISPATCH_SET_KERNEL},
        {"indirect_dispatch_set_count"sv, ResourceWriteOp::INDIRECT_DISPATCH_SET_COUNT},
    };
    auto iter = m.find(name);
    LUISA_ASSERT(iter != m.end(), "Unknown resource_write operation: {}.", name);
    return iter->second;
}

}// namespace luisa::compute::xir
